pipeline {
    agent any

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION = 'R2'
    }
    stages {
        stage('Audit tools') {
            steps {
                bat '''
                  git version
                  java -version
                  mvn -version
                '''
            }
        }

        stage('Unit Test') {
            steps {
                dir('./java-tomcat-sample') {
                    bat '''
                        echo "Executing Unit Tests..."
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            environment {
                // VERSION_SUFFIX = '10.1.0'
                def VERSION_SUFFIX = "${bat(script: '''
                                       @echo off
                                       if "%RELEASE%" == "false" (
                                           echo %INT_VERSION%.%BUILD_NUMBER%
                                       ) else (
                                           echo %RELEASE_VERSION%.%BUILD_NUMBER%
                                       )
                                       ''', returnStdout: true).trim()}"
            }
            steps {
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                echo 'Mention your Application Build Code here!!!'
                dir('./java-tomcat-sample') {
                        bat '''
                            mvn versions:set -DnewVersion=%VERSION_SUFFIX%-SNAPSHOT
                        '''
                }
                dir('./java-tomcat-sample') {
                        bat '''
                            mvn versions:update-child-modules
                        '''
                }
                dir('./java-tomcat-sample') {
                        bat '''
                            mvn clean package
                        '''
                }
            }
        }

        stage('Publish') {
            when {
                expression { return params.RELEASE }
            }

            steps {
                archiveArtifacts('**/*.war')
            }
        }
    }

    post {
        always {
            cleanWs()
         }
     }

}
