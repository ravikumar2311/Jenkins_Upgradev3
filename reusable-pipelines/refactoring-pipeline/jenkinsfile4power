pipeline {
    agent any

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION = 'R2'
    }
    stages {
        stage('Audit tools') {
            steps {
                auditTools()
            }
        }

        stage('Unit Test') {
            steps {
                dir('./java-tomcat-sample') {
                    bat '''
                        echo "Executing Unit Tests..."
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            environment {
                // VERSION_SUFFIX = '10.1.0'
                def VERSION_SUFFIX = getBuildVersion()
            }
            steps {
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                echo 'Mention your Application Build Code here!!!'
                packageApplicationcmd1()
                packageApplicationcmd2()
                packageApplicationcmd3()
            }
        }

        stage('Publish') {
            when {
                expression { return params.RELEASE }
            }

            steps {
                archiveArtifacts('**/*.war')
            }
        }
    }

    post {
        always {
            cleanWs()
         }
     }

}

String getBuildVersion() {
    if (params.RELEASE) {
        return env.RELEASE_VERSION + '.' + env.BUILD_NUMBER
    } else {
        return env.INT_VERSION + '.' + env.BUILD_NUMBER
    }
}

void auditTools() {
    bat '''
        git version
        java -version
        mvn -version
    '''
}

void packageApplicationcmd1() {
    bat '''
        cd ./java-tomcat-sample
        mvn versions:set -DnewVersion="%VERSION_SUFFIX%-SNAPSHOT"
    '''
}

void packageApplicationcmd2() {
    bat '''
        cd ./java-tomcat-sample
        mvn versions:update-child-modules
    '''
}

void packageApplicationcmd3() {
    bat '''
        cd ./java-tomcat-sample
        mvn clean package
    '''
}
